name: CI-CD Pipeline

on:
  push:
    branches:
      - main

jobs:
# Testing
  testing:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0'

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release

      - name: Test
        run: dotnet test --configuration Release

# Build and Deploy
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and Push Product Service Docker image
        env:
          APP_UID: 1000
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/product-service:v1 ./Product-Service
          docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin <<< ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/product-service:v1

      - name: Build and Push User Service Docker image
        env:
          APP_UID: 1000
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/user-service:v1 ./User-Service
          docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin <<< ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/user-service:v1

      - name: Build and Push API Gateway Docker image
        env:
          APP_UID: 1000
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/amazingateaway:v1 ./AmazinGateaway
          docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin <<< ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/amazingateaway:v1

      - name: Pull latest images
        run: docker-compose -f docker-compose.yml pull

      - name: Deploy with Docker Compose
        run: docker-compose -f docker-compose.yml up -d

# SonarQube
  sonarcloud:
    runs-on: ubuntu-latest
      - name: SonarScanner for .NET 8 with pull request decoration support
        uses: highbyte/sonarscan-dotnet@v2.3.2
        with:
            # The key of the SonarQube project
            sonarProjectKey: Amazin
            # The name of the SonarQube project
            sonarProjectName:  Amazin
            # The name of the SonarQube organization in SonarCloud. For hosted SonarQube, skip this setting.
            sonarOrganization: your_organization

    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}