name: CI-CD Pipeline

on:
  push:
    branches:
      - main

jobs:
# Testing
  testing:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0'

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release

      - name: Test
        run: dotnet test --configuration Release

# Build and Deploy
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and Push Product Service Docker image
        env:
          APP_UID: 1000
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/product-service:v1 ./Product-Service
          docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin <<< ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/product-service:v1

      - name: Build and Push User Service Docker image
        env:
          APP_UID: 1000
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/user-service:v1 ./User-Service
          docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin <<< ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/user-service:v1

      - name: Build and Push API Gateway Docker image
        env:
          APP_UID: 1000
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/amazingateaway:v1 ./AmazinGateaway
          docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin <<< ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/amazingateaway:v1

      - name: Pull latest images
        run: docker-compose -f docker-compose.yml pull

      - name: Deploy with Docker Compose
        run: docker-compose -f docker-compose.yml up -d

# SonarQube 
  Sonarqube:
    name: Sonarqube
    runs-on: self-hosted
    permissions: read-all
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./.sonar/scanner
          curl -L https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-macosx.zip -o sonar-scanner.zip
          unzip sonar-scanner.zip -d ./.sonar/scanner
      - name: Build and analyze
        run: |
          ./.sonar/scanner/sonar-scanner-4.6.2.2472-macosx/bin/sonar-scanner -Dsonar.projectKey="Amazin" -Dsonar.host.url="${{ secrets.SONAR_HOST_URL }}" -Dsonar.login="${{ secrets.SONAR_TOKEN }}"