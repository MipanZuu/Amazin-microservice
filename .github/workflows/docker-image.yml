name: CI-CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and Push Product Service Docker image
        env:
          APP_UID: 1000
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/product-service:v1 ./Product-Service
          docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin <<< ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/product-service:v1

      - name: Build and Push User Service Docker image
        env:
          APP_UID: 1000
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/user-service:v1 ./User-Service
          docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin <<< ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/user-service:v1

      - name: Build and Push API Gateway Docker image
        env:
          APP_UID: 1000
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/amazingateaway:v1 ./AmazinGateaway
          docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin <<< ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/amazingateaway:v1

      - name: Pull latest images
        run: docker-compose -f docker-compose.yml pull

      - name: Deploy with Docker Compose
        run: docker-compose -f docker-compose.yml up -d
    
  testing:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0'

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release

      - name: Test
        run: dotnet test --configuration Release
    
  sonarqube:
    runs-on: ubuntu-latest
    needs: testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup SonarQube Scanner
        uses: sonarsource/sonarqube-scan-action@v1
        with:
          sonar-url: ${{ secrets.SONAR_HOST_URL }}
          sonar-login: ${{ secrets.SONAR_TOKEN }}

      - name: Run SonarQube analysis
        run: dotnet sonarscanner begin /k:"your_project_key" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:sonar.cs.dotcover.reportsPaths="**/*.dotcover"

      - name: Build
        run: dotnet build --configuration Release

      - name: Test
        run: dotnet test --configuration Release

      - name: End SonarQube analysis
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"